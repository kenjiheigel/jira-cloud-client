/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * OpenAPI spec version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.AddSecuritySchemeLevelsRequestBean;
import io.swagger.client.model.AssociateSecuritySchemeWithProjectDetails;
import io.swagger.client.model.ErrorCollection;
import io.swagger.client.model.PageBeanIssueSecuritySchemeToProjectMapping;
import io.swagger.client.model.PageBeanSecurityLevel;
import io.swagger.client.model.PageBeanSecurityLevelMember;
import io.swagger.client.model.PageBeanSecuritySchemeWithProjects;
import io.swagger.client.model.SecurityScheme;
import io.swagger.client.model.SecuritySchemeId;
import io.swagger.client.model.SecuritySchemeMembersRequest;
import io.swagger.client.model.SecuritySchemes;
import io.swagger.client.model.TaskProgressBeanObject;
import io.swagger.client.model.UpdateIssueSecuritySchemeRequestBean;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for IssueSecuritySchemesApi
 */
@Ignore
public class IssueSecuritySchemesApiTest {

    private final IssueSecuritySchemesApi api = new IssueSecuritySchemesApi();

    /**
     * Add issue security levels
     *
     * Adds levels and levels&#x27; members to the issue security scheme. You can add up to 100 levels per request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addSecurityLevelTest() throws Exception {
        AddSecuritySchemeLevelsRequestBean body = null;
        String schemeId = null;
        Object response = api.addSecurityLevel(body, schemeId);

        // TODO: test validations
    }
    /**
     * Add issue security level members
     *
     * Adds members to the issue security level. You can add up to 100 members per request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addSecurityLevelMembersTest() throws Exception {
        SecuritySchemeMembersRequest body = null;
        String schemeId = null;
        String levelId = null;
        Object response = api.addSecurityLevelMembers(body, schemeId, levelId);

        // TODO: test validations
    }
    /**
     * Associate security scheme to project
     *
     * Associates an issue security scheme with a project and remaps security levels of issues to the new levels, if provided.  This operation is [asynchronous](#async). Follow the &#x60;location&#x60; link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void associateSchemesToProjectsTest() throws Exception {
        AssociateSecuritySchemeWithProjectDetails body = null;
        api.associateSchemesToProjects(body);

        // TODO: test validations
    }
    /**
     * Create issue security scheme
     *
     * Creates a security scheme with security scheme levels and levels&#x27; members. You can create up to 100 security scheme levels and security scheme levels&#x27; members per request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createIssueSecuritySchemeTest() throws Exception {
        Map<String, Object> body = null;
        SecuritySchemeId response = api.createIssueSecurityScheme(body);

        // TODO: test validations
    }
    /**
     * Delete issue security scheme
     *
     * Deletes an issue security scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deleteSecuritySchemeTest() throws Exception {
        String schemeId = null;
        Object response = api.deleteSecurityScheme(schemeId);

        // TODO: test validations
    }
    /**
     * Get issue security scheme
     *
     * Returns an issue security scheme along with its security levels.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project that uses the requested issue security scheme.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getIssueSecuritySchemeTest() throws Exception {
        Long id = null;
        SecurityScheme response = api.getIssueSecurityScheme(id);

        // TODO: test validations
    }
    /**
     * Get issue security schemes
     *
     * Returns all [issue security schemes](https://confluence.atlassian.com/x/J4lKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getIssueSecuritySchemesTest() throws Exception {
        SecuritySchemes response = api.getIssueSecuritySchemes();

        // TODO: test validations
    }
    /**
     * Get issue security level members
     *
     * Returns a [paginated](#pagination) list of issue security level members.  Only issue security level members in the context of classic projects are returned.  Filtering using parameters is inclusive: if you specify both security scheme IDs and level IDs, the result will include all issue security level members from the specified schemes and levels.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSecurityLevelMembersTest() throws Exception {
        String startAt = null;
        String maxResults = null;
        List<String> id = null;
        List<String> schemeId = null;
        List<String> levelId = null;
        String expand = null;
        PageBeanSecurityLevelMember response = api.getSecurityLevelMembers(startAt, maxResults, id, schemeId, levelId, expand);

        // TODO: test validations
    }
    /**
     * Get issue security levels
     *
     * Returns a [paginated](#pagination) list of issue security levels.  Only issue security levels in the context of classic projects are returned.  Filtering using IDs is inclusive: if you specify both security scheme IDs and level IDs, the result will include both specified issue security levels and all issue security levels from the specified schemes.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSecurityLevelsTest() throws Exception {
        String startAt = null;
        String maxResults = null;
        List<String> id = null;
        List<String> schemeId = null;
        Boolean onlyDefault = null;
        PageBeanSecurityLevel response = api.getSecurityLevels(startAt, maxResults, id, schemeId, onlyDefault);

        // TODO: test validations
    }
    /**
     * Remove issue security level
     *
     * Deletes an issue security level.  This operation is [asynchronous](#async). Follow the &#x60;location&#x60; link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeLevelTest() throws Exception {
        String schemeId = null;
        String levelId = null;
        String replaceWith = null;
        api.removeLevel(schemeId, levelId, replaceWith);

        // TODO: test validations
    }
    /**
     * Remove member from issue security level
     *
     * Removes an issue security level member from an issue security scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeMemberFromSecurityLevelTest() throws Exception {
        String schemeId = null;
        String levelId = null;
        String memberId = null;
        Object response = api.removeMemberFromSecurityLevel(schemeId, levelId, memberId);

        // TODO: test validations
    }
    /**
     * Get projects using issue security schemes
     *
     * Returns a [paginated](#pagination) mapping of projects that are using security schemes. You can provide either one or multiple security scheme IDs or project IDs to filter by. If you don&#x27;t provide any, this will return a list of all mappings. Only issue security schemes in the context of classic projects are supported. **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void searchProjectsUsingSecuritySchemesTest() throws Exception {
        String startAt = null;
        String maxResults = null;
        List<String> issueSecuritySchemeId = null;
        List<String> projectId = null;
        PageBeanIssueSecuritySchemeToProjectMapping response = api.searchProjectsUsingSecuritySchemes(startAt, maxResults, issueSecuritySchemeId, projectId);

        // TODO: test validations
    }
    /**
     * Search issue security schemes
     *
     * Returns a [paginated](#pagination) list of issue security schemes.   If you specify the project ID parameter, the result will contain issue security schemes and related project IDs you filter by. Use \\{@link IssueSecuritySchemeResource\\#searchProjectsUsingSecuritySchemes(String, String, Set, Set)\\} to obtain all projects related to scheme.  Only issue security schemes in the context of classic projects are returned.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void searchSecuritySchemesTest() throws Exception {
        String startAt = null;
        String maxResults = null;
        List<String> id = null;
        List<String> projectId = null;
        PageBeanSecuritySchemeWithProjects response = api.searchSecuritySchemes(startAt, maxResults, id, projectId);

        // TODO: test validations
    }
    /**
     * Set default issue security levels
     *
     * Sets default issue security levels for schemes.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void setDefaultLevelsTest() throws Exception {
        Map<String, Object> body = null;
        Object response = api.setDefaultLevels(body);

        // TODO: test validations
    }
    /**
     * Update issue security scheme
     *
     * Updates the issue security scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateIssueSecuritySchemeTest() throws Exception {
        UpdateIssueSecuritySchemeRequestBean body = null;
        String id = null;
        Object response = api.updateIssueSecurityScheme(body, id);

        // TODO: test validations
    }
    /**
     * Update issue security level
     *
     * Updates the issue security level.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateSecurityLevelTest() throws Exception {
        Map<String, Object> body = null;
        String schemeId = null;
        String levelId = null;
        Object response = api.updateSecurityLevel(body, schemeId, levelId);

        // TODO: test validations
    }
}
