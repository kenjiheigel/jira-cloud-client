/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * OpenAPI spec version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Details of a link between issues.
 */
@Schema(description = "Details of a link between issues.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-07-21T14:14:33.600-07:00[America/Los_Angeles]")

public class IssueLink {
  @SerializedName("id")
  private String id = null;

  @SerializedName("inwardIssue")
  private AllOfIssueLinkInwardIssue inwardIssue = null;

  @SerializedName("outwardIssue")
  private AllOfIssueLinkOutwardIssue outwardIssue = null;

  @SerializedName("self")
  private String self = null;

  @SerializedName("type")
  private AllOfIssueLinkType type = null;

   /**
   * The ID of the issue link.
   * @return id
  **/
  @Schema(description = "The ID of the issue link.")
  public String getId() {
    return id;
  }

  public IssueLink inwardIssue(AllOfIssueLinkInwardIssue inwardIssue) {
    this.inwardIssue = inwardIssue;
    return this;
  }

   /**
   * Provides details about the linked issue. If presenting this link in a user interface, use the &#x60;inward&#x60; field of the issue link type to label the link.
   * @return inwardIssue
  **/
  @Schema(required = true, description = "Provides details about the linked issue. If presenting this link in a user interface, use the `inward` field of the issue link type to label the link.")
  public AllOfIssueLinkInwardIssue getInwardIssue() {
    return inwardIssue;
  }

  public void setInwardIssue(AllOfIssueLinkInwardIssue inwardIssue) {
    this.inwardIssue = inwardIssue;
  }

  public IssueLink outwardIssue(AllOfIssueLinkOutwardIssue outwardIssue) {
    this.outwardIssue = outwardIssue;
    return this;
  }

   /**
   * Provides details about the linked issue. If presenting this link in a user interface, use the &#x60;outward&#x60; field of the issue link type to label the link.
   * @return outwardIssue
  **/
  @Schema(required = true, description = "Provides details about the linked issue. If presenting this link in a user interface, use the `outward` field of the issue link type to label the link.")
  public AllOfIssueLinkOutwardIssue getOutwardIssue() {
    return outwardIssue;
  }

  public void setOutwardIssue(AllOfIssueLinkOutwardIssue outwardIssue) {
    this.outwardIssue = outwardIssue;
  }

   /**
   * The URL of the issue link.
   * @return self
  **/
  @Schema(description = "The URL of the issue link.")
  public String getSelf() {
    return self;
  }

  public IssueLink type(AllOfIssueLinkType type) {
    this.type = type;
    return this;
  }

   /**
   * The type of link between the issues.
   * @return type
  **/
  @Schema(required = true, description = "The type of link between the issues.")
  public AllOfIssueLinkType getType() {
    return type;
  }

  public void setType(AllOfIssueLinkType type) {
    this.type = type;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssueLink issueLink = (IssueLink) o;
    return Objects.equals(this.id, issueLink.id) &&
        Objects.equals(this.inwardIssue, issueLink.inwardIssue) &&
        Objects.equals(this.outwardIssue, issueLink.outwardIssue) &&
        Objects.equals(this.self, issueLink.self) &&
        Objects.equals(this.type, issueLink.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, inwardIssue, outwardIssue, self, type);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssueLink {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inwardIssue: ").append(toIndentedString(inwardIssue)).append("\n");
    sb.append("    outwardIssue: ").append(toIndentedString(outwardIssue)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
