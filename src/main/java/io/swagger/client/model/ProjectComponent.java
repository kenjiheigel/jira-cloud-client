/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * OpenAPI spec version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Details about a project component.
 */
@Schema(description = "Details about a project component.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-07-21T14:14:33.600-07:00[America/Los_Angeles]")

public class ProjectComponent {
  @SerializedName("assignee")
  private AllOfProjectComponentAssignee assignee = null;

  /**
   * The nominal user type used to determine the assignee for issues created with this component. See &#x60;realAssigneeType&#x60; for details on how the type of the user, and hence the user, assigned to issues is determined. Can take the following values:   *  &#x60;PROJECT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the project the component is in.  *  &#x60;COMPONENT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the component.  *  &#x60;UNASSIGNED&#x60; an assignee is not set for issues created with this component.  *  &#x60;PROJECT_DEFAULT&#x60; the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.  Default value: &#x60;PROJECT_DEFAULT&#x60;.   Optional when creating or updating a component.
   */
  @JsonAdapter(AssigneeTypeEnum.Adapter.class)
  public enum AssigneeTypeEnum {
    @SerializedName("PROJECT_DEFAULT")
    PROJECT_DEFAULT("PROJECT_DEFAULT"),
    @SerializedName("COMPONENT_LEAD")
    COMPONENT_LEAD("COMPONENT_LEAD"),
    @SerializedName("PROJECT_LEAD")
    PROJECT_LEAD("PROJECT_LEAD"),
    @SerializedName("UNASSIGNED")
    UNASSIGNED("UNASSIGNED");

    private String value;

    AssigneeTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static AssigneeTypeEnum fromValue(String input) {
      for (AssigneeTypeEnum b : AssigneeTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<AssigneeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AssigneeTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public AssigneeTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return AssigneeTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("assigneeType")
  private AssigneeTypeEnum assigneeType = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("isAssigneeTypeValid")
  private Boolean isAssigneeTypeValid = null;

  @SerializedName("lead")
  private AllOfProjectComponentLead lead = null;

  @SerializedName("leadAccountId")
  private String leadAccountId = null;

  @SerializedName("leadUserName")
  private String leadUserName = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("project")
  private String project = null;

  @SerializedName("projectId")
  private Long projectId = null;

  @SerializedName("realAssignee")
  private AllOfProjectComponentRealAssignee realAssignee = null;

  /**
   * The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the &#x60;assigneeType&#x60;. For example, &#x60;assigneeType&#x60; is set to &#x60;COMPONENT_LEAD&#x60; but no component lead is set. This property is set to one of the following values:   *  &#x60;PROJECT_LEAD&#x60; when &#x60;assigneeType&#x60; is &#x60;PROJECT_LEAD&#x60; and the project lead has permission to be assigned issues in the project that the component is in.  *  &#x60;COMPONENT_LEAD&#x60; when &#x60;assignee&#x60;Type is &#x60;COMPONENT_LEAD&#x60; and the component lead has permission to be assigned issues in the project that the component is in.  *  &#x60;UNASSIGNED&#x60; when &#x60;assigneeType&#x60; is &#x60;UNASSIGNED&#x60; and Jira is configured to allow unassigned issues.  *  &#x60;PROJECT_DEFAULT&#x60; when none of the preceding cases are true.
   */
  @JsonAdapter(RealAssigneeTypeEnum.Adapter.class)
  public enum RealAssigneeTypeEnum {
    @SerializedName("PROJECT_DEFAULT")
    PROJECT_DEFAULT("PROJECT_DEFAULT"),
    @SerializedName("COMPONENT_LEAD")
    COMPONENT_LEAD("COMPONENT_LEAD"),
    @SerializedName("PROJECT_LEAD")
    PROJECT_LEAD("PROJECT_LEAD"),
    @SerializedName("UNASSIGNED")
    UNASSIGNED("UNASSIGNED");

    private String value;

    RealAssigneeTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RealAssigneeTypeEnum fromValue(String input) {
      for (RealAssigneeTypeEnum b : RealAssigneeTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RealAssigneeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RealAssigneeTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public RealAssigneeTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return RealAssigneeTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("realAssigneeType")
  private RealAssigneeTypeEnum realAssigneeType = null;

  @SerializedName("self")
  private String self = null;

   /**
   * The details of the user associated with &#x60;assigneeType&#x60;, if any. See &#x60;realAssignee&#x60; for details of the user assigned to issues created with this component.
   * @return assignee
  **/
  @Schema(description = "The details of the user associated with `assigneeType`, if any. See `realAssignee` for details of the user assigned to issues created with this component.")
  public AllOfProjectComponentAssignee getAssignee() {
    return assignee;
  }

  public ProjectComponent assigneeType(AssigneeTypeEnum assigneeType) {
    this.assigneeType = assigneeType;
    return this;
  }

   /**
   * The nominal user type used to determine the assignee for issues created with this component. See &#x60;realAssigneeType&#x60; for details on how the type of the user, and hence the user, assigned to issues is determined. Can take the following values:   *  &#x60;PROJECT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the project the component is in.  *  &#x60;COMPONENT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the component.  *  &#x60;UNASSIGNED&#x60; an assignee is not set for issues created with this component.  *  &#x60;PROJECT_DEFAULT&#x60; the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.  Default value: &#x60;PROJECT_DEFAULT&#x60;.   Optional when creating or updating a component.
   * @return assigneeType
  **/
  @Schema(description = "The nominal user type used to determine the assignee for issues created with this component. See `realAssigneeType` for details on how the type of the user, and hence the user, assigned to issues is determined. Can take the following values:   *  `PROJECT_LEAD` the assignee to any issues created with this component is nominally the lead for the project the component is in.  *  `COMPONENT_LEAD` the assignee to any issues created with this component is nominally the lead for the component.  *  `UNASSIGNED` an assignee is not set for issues created with this component.  *  `PROJECT_DEFAULT` the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.  Default value: `PROJECT_DEFAULT`.   Optional when creating or updating a component.")
  public AssigneeTypeEnum getAssigneeType() {
    return assigneeType;
  }

  public void setAssigneeType(AssigneeTypeEnum assigneeType) {
    this.assigneeType = assigneeType;
  }

  public ProjectComponent description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The description for the component. Optional when creating or updating a component.
   * @return description
  **/
  @Schema(description = "The description for the component. Optional when creating or updating a component.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

   /**
   * The unique identifier for the component.
   * @return id
  **/
  @Schema(description = "The unique identifier for the component.")
  public String getId() {
    return id;
  }

   /**
   * Whether a user is associated with &#x60;assigneeType&#x60;. For example, if the &#x60;assigneeType&#x60; is set to &#x60;COMPONENT_LEAD&#x60; but the component lead is not set, then &#x60;false&#x60; is returned.
   * @return isAssigneeTypeValid
  **/
  @Schema(description = "Whether a user is associated with `assigneeType`. For example, if the `assigneeType` is set to `COMPONENT_LEAD` but the component lead is not set, then `false` is returned.")
  public Boolean isIsAssigneeTypeValid() {
    return isAssigneeTypeValid;
  }

   /**
   * The user details for the component&#x27;s lead user.
   * @return lead
  **/
  @Schema(description = "The user details for the component's lead user.")
  public AllOfProjectComponentLead getLead() {
    return lead;
  }

  public ProjectComponent leadAccountId(String leadAccountId) {
    this.leadAccountId = leadAccountId;
    return this;
  }

   /**
   * The accountId of the component&#x27;s lead user. The accountId uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
   * @return leadAccountId
  **/
  @Schema(description = "The accountId of the component's lead user. The accountId uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.")
  public String getLeadAccountId() {
    return leadAccountId;
  }

  public void setLeadAccountId(String leadAccountId) {
    this.leadAccountId = leadAccountId;
  }

  public ProjectComponent leadUserName(String leadUserName) {
    this.leadUserName = leadUserName;
    return this;
  }

   /**
   * This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
   * @return leadUserName
  **/
  @Schema(description = "This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.")
  public String getLeadUserName() {
    return leadUserName;
  }

  public void setLeadUserName(String leadUserName) {
    this.leadUserName = leadUserName;
  }

  public ProjectComponent name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The unique name for the component in the project. Required when creating a component. Optional when updating a component. The maximum length is 255 characters.
   * @return name
  **/
  @Schema(description = "The unique name for the component in the project. Required when creating a component. Optional when updating a component. The maximum length is 255 characters.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ProjectComponent project(String project) {
    this.project = project;
    return this;
  }

   /**
   * The key of the project the component is assigned to. Required when creating a component. Can&#x27;t be updated.
   * @return project
  **/
  @Schema(description = "The key of the project the component is assigned to. Required when creating a component. Can't be updated.")
  public String getProject() {
    return project;
  }

  public void setProject(String project) {
    this.project = project;
  }

   /**
   * The ID of the project the component is assigned to.
   * @return projectId
  **/
  @Schema(description = "The ID of the project the component is assigned to.")
  public Long getProjectId() {
    return projectId;
  }

   /**
   * The user assigned to issues created with this component, when &#x60;assigneeType&#x60; does not identify a valid assignee.
   * @return realAssignee
  **/
  @Schema(description = "The user assigned to issues created with this component, when `assigneeType` does not identify a valid assignee.")
  public AllOfProjectComponentRealAssignee getRealAssignee() {
    return realAssignee;
  }

   /**
   * The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the &#x60;assigneeType&#x60;. For example, &#x60;assigneeType&#x60; is set to &#x60;COMPONENT_LEAD&#x60; but no component lead is set. This property is set to one of the following values:   *  &#x60;PROJECT_LEAD&#x60; when &#x60;assigneeType&#x60; is &#x60;PROJECT_LEAD&#x60; and the project lead has permission to be assigned issues in the project that the component is in.  *  &#x60;COMPONENT_LEAD&#x60; when &#x60;assignee&#x60;Type is &#x60;COMPONENT_LEAD&#x60; and the component lead has permission to be assigned issues in the project that the component is in.  *  &#x60;UNASSIGNED&#x60; when &#x60;assigneeType&#x60; is &#x60;UNASSIGNED&#x60; and Jira is configured to allow unassigned issues.  *  &#x60;PROJECT_DEFAULT&#x60; when none of the preceding cases are true.
   * @return realAssigneeType
  **/
  @Schema(description = "The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the `assigneeType`. For example, `assigneeType` is set to `COMPONENT_LEAD` but no component lead is set. This property is set to one of the following values:   *  `PROJECT_LEAD` when `assigneeType` is `PROJECT_LEAD` and the project lead has permission to be assigned issues in the project that the component is in.  *  `COMPONENT_LEAD` when `assignee`Type is `COMPONENT_LEAD` and the component lead has permission to be assigned issues in the project that the component is in.  *  `UNASSIGNED` when `assigneeType` is `UNASSIGNED` and Jira is configured to allow unassigned issues.  *  `PROJECT_DEFAULT` when none of the preceding cases are true.")
  public RealAssigneeTypeEnum getRealAssigneeType() {
    return realAssigneeType;
  }

   /**
   * The URL of the component.
   * @return self
  **/
  @Schema(description = "The URL of the component.")
  public String getSelf() {
    return self;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectComponent projectComponent = (ProjectComponent) o;
    return Objects.equals(this.assignee, projectComponent.assignee) &&
        Objects.equals(this.assigneeType, projectComponent.assigneeType) &&
        Objects.equals(this.description, projectComponent.description) &&
        Objects.equals(this.id, projectComponent.id) &&
        Objects.equals(this.isAssigneeTypeValid, projectComponent.isAssigneeTypeValid) &&
        Objects.equals(this.lead, projectComponent.lead) &&
        Objects.equals(this.leadAccountId, projectComponent.leadAccountId) &&
        Objects.equals(this.leadUserName, projectComponent.leadUserName) &&
        Objects.equals(this.name, projectComponent.name) &&
        Objects.equals(this.project, projectComponent.project) &&
        Objects.equals(this.projectId, projectComponent.projectId) &&
        Objects.equals(this.realAssignee, projectComponent.realAssignee) &&
        Objects.equals(this.realAssigneeType, projectComponent.realAssigneeType) &&
        Objects.equals(this.self, projectComponent.self);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assignee, assigneeType, description, id, isAssigneeTypeValid, lead, leadAccountId, leadUserName, name, project, projectId, realAssignee, realAssigneeType, self);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectComponent {\n");
    
    sb.append("    assignee: ").append(toIndentedString(assignee)).append("\n");
    sb.append("    assigneeType: ").append(toIndentedString(assigneeType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isAssigneeTypeValid: ").append(toIndentedString(isAssigneeTypeValid)).append("\n");
    sb.append("    lead: ").append(toIndentedString(lead)).append("\n");
    sb.append("    leadAccountId: ").append(toIndentedString(leadAccountId)).append("\n");
    sb.append("    leadUserName: ").append(toIndentedString(leadUserName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    realAssignee: ").append(toIndentedString(realAssignee)).append("\n");
    sb.append("    realAssigneeType: ").append(toIndentedString(realAssigneeType)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
