/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * OpenAPI spec version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ProjectIssueTypes;
import io.swagger.client.model.StatusScope;
import io.swagger.client.model.WorkflowUsages;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Details of a status.
 */
@Schema(description = "Details of a status.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-07-21T14:14:33.600-07:00[America/Los_Angeles]")

public class JiraStatus {
  @SerializedName("description")
  private String description = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("scope")
  private StatusScope scope = null;

  /**
   * The category of the status.
   */
  @JsonAdapter(StatusCategoryEnum.Adapter.class)
  public enum StatusCategoryEnum {
    @SerializedName("TODO")
    TODO("TODO"),
    @SerializedName("IN_PROGRESS")
    IN_PROGRESS("IN_PROGRESS"),
    @SerializedName("DONE")
    DONE("DONE");

    private String value;

    StatusCategoryEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusCategoryEnum fromValue(String input) {
      for (StatusCategoryEnum b : StatusCategoryEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusCategoryEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StatusCategoryEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StatusCategoryEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("statusCategory")
  private StatusCategoryEnum statusCategory = null;

  @SerializedName("usages")
  private List<ProjectIssueTypes> usages = null;

  @SerializedName("workflowUsages")
  private List<WorkflowUsages> workflowUsages = null;

  public JiraStatus description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The description of the status.
   * @return description
  **/
  @Schema(description = "The description of the status.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public JiraStatus id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The ID of the status.
   * @return id
  **/
  @Schema(description = "The ID of the status.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public JiraStatus name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the status.
   * @return name
  **/
  @Schema(description = "The name of the status.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public JiraStatus scope(StatusScope scope) {
    this.scope = scope;
    return this;
  }

   /**
   * Get scope
   * @return scope
  **/
  @Schema(description = "")
  public StatusScope getScope() {
    return scope;
  }

  public void setScope(StatusScope scope) {
    this.scope = scope;
  }

  public JiraStatus statusCategory(StatusCategoryEnum statusCategory) {
    this.statusCategory = statusCategory;
    return this;
  }

   /**
   * The category of the status.
   * @return statusCategory
  **/
  @Schema(description = "The category of the status.")
  public StatusCategoryEnum getStatusCategory() {
    return statusCategory;
  }

  public void setStatusCategory(StatusCategoryEnum statusCategory) {
    this.statusCategory = statusCategory;
  }

  public JiraStatus usages(List<ProjectIssueTypes> usages) {
    this.usages = usages;
    return this;
  }

  public JiraStatus addUsagesItem(ProjectIssueTypes usagesItem) {
    if (this.usages == null) {
      this.usages = new ArrayList<ProjectIssueTypes>();
    }
    this.usages.add(usagesItem);
    return this;
  }

   /**
   * Projects and issue types where the status is used. Only available if the &#x60;usages&#x60; expand is requested.
   * @return usages
  **/
  @Schema(description = "Projects and issue types where the status is used. Only available if the `usages` expand is requested.")
  public List<ProjectIssueTypes> getUsages() {
    return usages;
  }

  public void setUsages(List<ProjectIssueTypes> usages) {
    this.usages = usages;
  }

  public JiraStatus workflowUsages(List<WorkflowUsages> workflowUsages) {
    this.workflowUsages = workflowUsages;
    return this;
  }

  public JiraStatus addWorkflowUsagesItem(WorkflowUsages workflowUsagesItem) {
    if (this.workflowUsages == null) {
      this.workflowUsages = new ArrayList<WorkflowUsages>();
    }
    this.workflowUsages.add(workflowUsagesItem);
    return this;
  }

   /**
   * The workflows that use this status. Only available if the &#x60;workflowUsages&#x60; expand is requested.
   * @return workflowUsages
  **/
  @Schema(description = "The workflows that use this status. Only available if the `workflowUsages` expand is requested.")
  public List<WorkflowUsages> getWorkflowUsages() {
    return workflowUsages;
  }

  public void setWorkflowUsages(List<WorkflowUsages> workflowUsages) {
    this.workflowUsages = workflowUsages;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JiraStatus jiraStatus = (JiraStatus) o;
    return Objects.equals(this.description, jiraStatus.description) &&
        Objects.equals(this.id, jiraStatus.id) &&
        Objects.equals(this.name, jiraStatus.name) &&
        Objects.equals(this.scope, jiraStatus.scope) &&
        Objects.equals(this.statusCategory, jiraStatus.statusCategory) &&
        Objects.equals(this.usages, jiraStatus.usages) &&
        Objects.equals(this.workflowUsages, jiraStatus.workflowUsages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, id, name, scope, statusCategory, usages, workflowUsages);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JiraStatus {\n");
    
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    statusCategory: ").append(toIndentedString(statusCategory)).append("\n");
    sb.append("    usages: ").append(toIndentedString(usages)).append("\n");
    sb.append("    workflowUsages: ").append(toIndentedString(workflowUsages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
