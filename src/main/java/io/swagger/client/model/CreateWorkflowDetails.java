/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * OpenAPI spec version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.CreateWorkflowStatusDetails;
import io.swagger.client.model.CreateWorkflowTransitionDetails;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * The details of a workflow.
 */
@Schema(description = "The details of a workflow.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-07-21T14:14:33.600-07:00[America/Los_Angeles]")

public class CreateWorkflowDetails {
  @SerializedName("description")
  private String description = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("statuses")
  private List<CreateWorkflowStatusDetails> statuses = new ArrayList<CreateWorkflowStatusDetails>();

  @SerializedName("transitions")
  private List<CreateWorkflowTransitionDetails> transitions = new ArrayList<CreateWorkflowTransitionDetails>();

  public CreateWorkflowDetails description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The description of the workflow. The maximum length is 1000 characters.
   * @return description
  **/
  @Schema(description = "The description of the workflow. The maximum length is 1000 characters.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public CreateWorkflowDetails name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the workflow. The name must be unique. The maximum length is 255 characters. Characters can be separated by a whitespace but the name cannot start or end with a whitespace.
   * @return name
  **/
  @Schema(required = true, description = "The name of the workflow. The name must be unique. The maximum length is 255 characters. Characters can be separated by a whitespace but the name cannot start or end with a whitespace.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public CreateWorkflowDetails statuses(List<CreateWorkflowStatusDetails> statuses) {
    this.statuses = statuses;
    return this;
  }

  public CreateWorkflowDetails addStatusesItem(CreateWorkflowStatusDetails statusesItem) {
    this.statuses.add(statusesItem);
    return this;
  }

   /**
   * The statuses of the workflow. Any status that does not include a transition is added to the workflow without a transition.
   * @return statuses
  **/
  @Schema(required = true, description = "The statuses of the workflow. Any status that does not include a transition is added to the workflow without a transition.")
  public List<CreateWorkflowStatusDetails> getStatuses() {
    return statuses;
  }

  public void setStatuses(List<CreateWorkflowStatusDetails> statuses) {
    this.statuses = statuses;
  }

  public CreateWorkflowDetails transitions(List<CreateWorkflowTransitionDetails> transitions) {
    this.transitions = transitions;
    return this;
  }

  public CreateWorkflowDetails addTransitionsItem(CreateWorkflowTransitionDetails transitionsItem) {
    this.transitions.add(transitionsItem);
    return this;
  }

   /**
   * The transitions of the workflow. For the request to be valid, these transitions must:   *  include one *initial* transition.  *  not use the same name for a *global* and *directed* transition.  *  have a unique name for each *global* transition.  *  have a unique &#x27;to&#x27; status for each *global* transition.  *  have unique names for each transition from a status.  *  not have a &#x27;from&#x27; status on *initial* and *global* transitions.  *  have a &#x27;from&#x27; status on *directed* transitions.  All the transition statuses must be included in &#x60;statuses&#x60;.
   * @return transitions
  **/
  @Schema(required = true, description = "The transitions of the workflow. For the request to be valid, these transitions must:   *  include one *initial* transition.  *  not use the same name for a *global* and *directed* transition.  *  have a unique name for each *global* transition.  *  have a unique 'to' status for each *global* transition.  *  have unique names for each transition from a status.  *  not have a 'from' status on *initial* and *global* transitions.  *  have a 'from' status on *directed* transitions.  All the transition statuses must be included in `statuses`.")
  public List<CreateWorkflowTransitionDetails> getTransitions() {
    return transitions;
  }

  public void setTransitions(List<CreateWorkflowTransitionDetails> transitions) {
    this.transitions = transitions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateWorkflowDetails createWorkflowDetails = (CreateWorkflowDetails) o;
    return Objects.equals(this.description, createWorkflowDetails.description) &&
        Objects.equals(this.name, createWorkflowDetails.name) &&
        Objects.equals(this.statuses, createWorkflowDetails.statuses) &&
        Objects.equals(this.transitions, createWorkflowDetails.transitions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, name, statuses, transitions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateWorkflowDetails {\n");
    
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    statuses: ").append(toIndentedString(statuses)).append("\n");
    sb.append("    transitions: ").append(toIndentedString(transitions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
