/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * OpenAPI spec version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * The Atlassian provided system rules available.
 */
@Schema(description = "The Atlassian provided system rules available.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-07-21T14:14:33.600-07:00[America/Los_Angeles]")

public class AvailableWorkflowSystemRule {
  @SerializedName("description")
  private String description = null;

  @SerializedName("incompatibleRuleKeys")
  private List<String> incompatibleRuleKeys = new ArrayList<String>();

  @SerializedName("isAvailableForInitialTransition")
  private Boolean isAvailableForInitialTransition = null;

  @SerializedName("isVisible")
  private Boolean isVisible = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("ruleKey")
  private String ruleKey = null;

  /**
   * The rule type.
   */
  @JsonAdapter(RuleTypeEnum.Adapter.class)
  public enum RuleTypeEnum {
    @SerializedName("Condition")
    CONDITION("Condition"),
    @SerializedName("Validator")
    VALIDATOR("Validator"),
    @SerializedName("Function")
    FUNCTION("Function"),
    @SerializedName("Screen")
    SCREEN("Screen");

    private String value;

    RuleTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RuleTypeEnum fromValue(String input) {
      for (RuleTypeEnum b : RuleTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RuleTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RuleTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public RuleTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return RuleTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("ruleType")
  private RuleTypeEnum ruleType = null;

  public AvailableWorkflowSystemRule description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The rule description.
   * @return description
  **/
  @Schema(required = true, description = "The rule description.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public AvailableWorkflowSystemRule incompatibleRuleKeys(List<String> incompatibleRuleKeys) {
    this.incompatibleRuleKeys = incompatibleRuleKeys;
    return this;
  }

  public AvailableWorkflowSystemRule addIncompatibleRuleKeysItem(String incompatibleRuleKeysItem) {
    this.incompatibleRuleKeys.add(incompatibleRuleKeysItem);
    return this;
  }

   /**
   * List of rules that conflict with this one.
   * @return incompatibleRuleKeys
  **/
  @Schema(required = true, description = "List of rules that conflict with this one.")
  public List<String> getIncompatibleRuleKeys() {
    return incompatibleRuleKeys;
  }

  public void setIncompatibleRuleKeys(List<String> incompatibleRuleKeys) {
    this.incompatibleRuleKeys = incompatibleRuleKeys;
  }

  public AvailableWorkflowSystemRule isAvailableForInitialTransition(Boolean isAvailableForInitialTransition) {
    this.isAvailableForInitialTransition = isAvailableForInitialTransition;
    return this;
  }

   /**
   * Whether the rule can be added added to an initial transition.
   * @return isAvailableForInitialTransition
  **/
  @Schema(required = true, description = "Whether the rule can be added added to an initial transition.")
  public Boolean isIsAvailableForInitialTransition() {
    return isAvailableForInitialTransition;
  }

  public void setIsAvailableForInitialTransition(Boolean isAvailableForInitialTransition) {
    this.isAvailableForInitialTransition = isAvailableForInitialTransition;
  }

  public AvailableWorkflowSystemRule isVisible(Boolean isVisible) {
    this.isVisible = isVisible;
    return this;
  }

   /**
   * Whether the rule is visible.
   * @return isVisible
  **/
  @Schema(required = true, description = "Whether the rule is visible.")
  public Boolean isIsVisible() {
    return isVisible;
  }

  public void setIsVisible(Boolean isVisible) {
    this.isVisible = isVisible;
  }

  public AvailableWorkflowSystemRule name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The rule name.
   * @return name
  **/
  @Schema(required = true, description = "The rule name.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public AvailableWorkflowSystemRule ruleKey(String ruleKey) {
    this.ruleKey = ruleKey;
    return this;
  }

   /**
   * The rule key.
   * @return ruleKey
  **/
  @Schema(required = true, description = "The rule key.")
  public String getRuleKey() {
    return ruleKey;
  }

  public void setRuleKey(String ruleKey) {
    this.ruleKey = ruleKey;
  }

  public AvailableWorkflowSystemRule ruleType(RuleTypeEnum ruleType) {
    this.ruleType = ruleType;
    return this;
  }

   /**
   * The rule type.
   * @return ruleType
  **/
  @Schema(required = true, description = "The rule type.")
  public RuleTypeEnum getRuleType() {
    return ruleType;
  }

  public void setRuleType(RuleTypeEnum ruleType) {
    this.ruleType = ruleType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvailableWorkflowSystemRule availableWorkflowSystemRule = (AvailableWorkflowSystemRule) o;
    return Objects.equals(this.description, availableWorkflowSystemRule.description) &&
        Objects.equals(this.incompatibleRuleKeys, availableWorkflowSystemRule.incompatibleRuleKeys) &&
        Objects.equals(this.isAvailableForInitialTransition, availableWorkflowSystemRule.isAvailableForInitialTransition) &&
        Objects.equals(this.isVisible, availableWorkflowSystemRule.isVisible) &&
        Objects.equals(this.name, availableWorkflowSystemRule.name) &&
        Objects.equals(this.ruleKey, availableWorkflowSystemRule.ruleKey) &&
        Objects.equals(this.ruleType, availableWorkflowSystemRule.ruleType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, incompatibleRuleKeys, isAvailableForInitialTransition, isVisible, name, ruleKey, ruleType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvailableWorkflowSystemRule {\n");
    
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    incompatibleRuleKeys: ").append(toIndentedString(incompatibleRuleKeys)).append("\n");
    sb.append("    isAvailableForInitialTransition: ").append(toIndentedString(isAvailableForInitialTransition)).append("\n");
    sb.append("    isVisible: ").append(toIndentedString(isVisible)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ruleKey: ").append(toIndentedString(ruleKey)).append("\n");
    sb.append("    ruleType: ").append(toIndentedString(ruleType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
