/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * OpenAPI spec version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.EntityProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.threeten.bp.OffsetDateTime;
/**
 * A comment.
 */
@Schema(description = "A comment.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-07-21T14:14:33.600-07:00[America/Los_Angeles]")

public class Comment extends HashMap<String, Object> {
  @SerializedName("author")
  private AllOfCommentAuthor author = null;

  @SerializedName("body")
  private Object body = null;

  @SerializedName("created")
  private OffsetDateTime created = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("jsdAuthorCanSeeRequest")
  private Boolean jsdAuthorCanSeeRequest = null;

  @SerializedName("jsdPublic")
  private Boolean jsdPublic = null;

  @SerializedName("properties")
  private List<EntityProperty> properties = null;

  @SerializedName("renderedBody")
  private String renderedBody = null;

  @SerializedName("self")
  private String self = null;

  @SerializedName("updateAuthor")
  private AllOfCommentUpdateAuthor updateAuthor = null;

  @SerializedName("updated")
  private OffsetDateTime updated = null;

  @SerializedName("visibility")
  private AllOfCommentVisibility visibility = null;

   /**
   * The ID of the user who created the comment.
   * @return author
  **/
  @Schema(description = "The ID of the user who created the comment.")
  public AllOfCommentAuthor getAuthor() {
    return author;
  }

  public Comment body(Object body) {
    this.body = body;
    return this;
  }

   /**
   * The comment text in [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/).
   * @return body
  **/
  @Schema(description = "The comment text in [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/).")
  public Object getBody() {
    return body;
  }

  public void setBody(Object body) {
    this.body = body;
  }

   /**
   * The date and time at which the comment was created.
   * @return created
  **/
  @Schema(description = "The date and time at which the comment was created.")
  public OffsetDateTime getCreated() {
    return created;
  }

   /**
   * The ID of the comment.
   * @return id
  **/
  @Schema(description = "The ID of the comment.")
  public String getId() {
    return id;
  }

   /**
   * Whether the comment was added from an email sent by a person who is not part of the issue. See [Allow external emails to be added as comments on issues](https://support.atlassian.com/jira-service-management-cloud/docs/allow-external-emails-to-be-added-as-comments-on-issues/)for information on setting up this feature.
   * @return jsdAuthorCanSeeRequest
  **/
  @Schema(description = "Whether the comment was added from an email sent by a person who is not part of the issue. See [Allow external emails to be added as comments on issues](https://support.atlassian.com/jira-service-management-cloud/docs/allow-external-emails-to-be-added-as-comments-on-issues/)for information on setting up this feature.")
  public Boolean isJsdAuthorCanSeeRequest() {
    return jsdAuthorCanSeeRequest;
  }

   /**
   * Whether the comment is visible in Jira Service Desk. Defaults to true when comments are created in the Jira Cloud Platform. This includes when the site doesn&#x27;t use Jira Service Desk or the project isn&#x27;t a Jira Service Desk project and, therefore, there is no Jira Service Desk for the issue to be visible on. To create a comment with its visibility in Jira Service Desk set to false, use the Jira Service Desk REST API [Create request comment](https://developer.atlassian.com/cloud/jira/service-desk/rest/#api-rest-servicedeskapi-request-issueIdOrKey-comment-post) operation.
   * @return jsdPublic
  **/
  @Schema(description = "Whether the comment is visible in Jira Service Desk. Defaults to true when comments are created in the Jira Cloud Platform. This includes when the site doesn't use Jira Service Desk or the project isn't a Jira Service Desk project and, therefore, there is no Jira Service Desk for the issue to be visible on. To create a comment with its visibility in Jira Service Desk set to false, use the Jira Service Desk REST API [Create request comment](https://developer.atlassian.com/cloud/jira/service-desk/rest/#api-rest-servicedeskapi-request-issueIdOrKey-comment-post) operation.")
  public Boolean isJsdPublic() {
    return jsdPublic;
  }

  public Comment properties(List<EntityProperty> properties) {
    this.properties = properties;
    return this;
  }

  public Comment addPropertiesItem(EntityProperty propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<EntityProperty>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * A list of comment properties. Optional on create and update.
   * @return properties
  **/
  @Schema(description = "A list of comment properties. Optional on create and update.")
  public List<EntityProperty> getProperties() {
    return properties;
  }

  public void setProperties(List<EntityProperty> properties) {
    this.properties = properties;
  }

   /**
   * The rendered version of the comment.
   * @return renderedBody
  **/
  @Schema(description = "The rendered version of the comment.")
  public String getRenderedBody() {
    return renderedBody;
  }

   /**
   * The URL of the comment.
   * @return self
  **/
  @Schema(description = "The URL of the comment.")
  public String getSelf() {
    return self;
  }

   /**
   * The ID of the user who updated the comment last.
   * @return updateAuthor
  **/
  @Schema(description = "The ID of the user who updated the comment last.")
  public AllOfCommentUpdateAuthor getUpdateAuthor() {
    return updateAuthor;
  }

   /**
   * The date and time at which the comment was updated last.
   * @return updated
  **/
  @Schema(description = "The date and time at which the comment was updated last.")
  public OffsetDateTime getUpdated() {
    return updated;
  }

  public Comment visibility(AllOfCommentVisibility visibility) {
    this.visibility = visibility;
    return this;
  }

   /**
   * The group or role to which this comment is visible. Optional on create and update.
   * @return visibility
  **/
  @Schema(description = "The group or role to which this comment is visible. Optional on create and update.")
  public AllOfCommentVisibility getVisibility() {
    return visibility;
  }

  public void setVisibility(AllOfCommentVisibility visibility) {
    this.visibility = visibility;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Comment comment = (Comment) o;
    return Objects.equals(this.author, comment.author) &&
        Objects.equals(this.body, comment.body) &&
        Objects.equals(this.created, comment.created) &&
        Objects.equals(this.id, comment.id) &&
        Objects.equals(this.jsdAuthorCanSeeRequest, comment.jsdAuthorCanSeeRequest) &&
        Objects.equals(this.jsdPublic, comment.jsdPublic) &&
        Objects.equals(this.properties, comment.properties) &&
        Objects.equals(this.renderedBody, comment.renderedBody) &&
        Objects.equals(this.self, comment.self) &&
        Objects.equals(this.updateAuthor, comment.updateAuthor) &&
        Objects.equals(this.updated, comment.updated) &&
        Objects.equals(this.visibility, comment.visibility) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(author, body, created, id, jsdAuthorCanSeeRequest, jsdPublic, properties, renderedBody, self, updateAuthor, updated, visibility, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Comment {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jsdAuthorCanSeeRequest: ").append(toIndentedString(jsdAuthorCanSeeRequest)).append("\n");
    sb.append("    jsdPublic: ").append(toIndentedString(jsdPublic)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    renderedBody: ").append(toIndentedString(renderedBody)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    updateAuthor: ").append(toIndentedString(updateAuthor)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
