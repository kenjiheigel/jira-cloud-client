/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * OpenAPI spec version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Details of a project feature.
 */
@Schema(description = "Details of a project feature.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-07-21T14:14:33.600-07:00[America/Los_Angeles]")

public class ProjectFeature {
  @SerializedName("feature")
  private String feature = null;

  @SerializedName("imageUri")
  private String imageUri = null;

  @SerializedName("localisedDescription")
  private String localisedDescription = null;

  @SerializedName("localisedName")
  private String localisedName = null;

  @SerializedName("prerequisites")
  private List<String> prerequisites = null;

  @SerializedName("projectId")
  private Long projectId = null;

  /**
   * The state of the feature. When updating the state of a feature, only ENABLED and DISABLED are supported. Responses can contain all values
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    @SerializedName("ENABLED")
    ENABLED("ENABLED"),
    @SerializedName("DISABLED")
    DISABLED("DISABLED"),
    @SerializedName("COMING_SOON")
    COMING_SOON("COMING_SOON");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StateEnum fromValue(String input) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return StateEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("state")
  private StateEnum state = null;

  @SerializedName("toggleLocked")
  private Boolean toggleLocked = null;

  public ProjectFeature feature(String feature) {
    this.feature = feature;
    return this;
  }

   /**
   * The key of the feature.
   * @return feature
  **/
  @Schema(description = "The key of the feature.")
  public String getFeature() {
    return feature;
  }

  public void setFeature(String feature) {
    this.feature = feature;
  }

  public ProjectFeature imageUri(String imageUri) {
    this.imageUri = imageUri;
    return this;
  }

   /**
   * URI for the image representing the feature.
   * @return imageUri
  **/
  @Schema(description = "URI for the image representing the feature.")
  public String getImageUri() {
    return imageUri;
  }

  public void setImageUri(String imageUri) {
    this.imageUri = imageUri;
  }

  public ProjectFeature localisedDescription(String localisedDescription) {
    this.localisedDescription = localisedDescription;
    return this;
  }

   /**
   * Localized display description for the feature.
   * @return localisedDescription
  **/
  @Schema(description = "Localized display description for the feature.")
  public String getLocalisedDescription() {
    return localisedDescription;
  }

  public void setLocalisedDescription(String localisedDescription) {
    this.localisedDescription = localisedDescription;
  }

  public ProjectFeature localisedName(String localisedName) {
    this.localisedName = localisedName;
    return this;
  }

   /**
   * Localized display name for the feature.
   * @return localisedName
  **/
  @Schema(description = "Localized display name for the feature.")
  public String getLocalisedName() {
    return localisedName;
  }

  public void setLocalisedName(String localisedName) {
    this.localisedName = localisedName;
  }

  public ProjectFeature prerequisites(List<String> prerequisites) {
    this.prerequisites = prerequisites;
    return this;
  }

  public ProjectFeature addPrerequisitesItem(String prerequisitesItem) {
    if (this.prerequisites == null) {
      this.prerequisites = new ArrayList<String>();
    }
    this.prerequisites.add(prerequisitesItem);
    return this;
  }

   /**
   * List of keys of the features required to enable the feature.
   * @return prerequisites
  **/
  @Schema(description = "List of keys of the features required to enable the feature.")
  public List<String> getPrerequisites() {
    return prerequisites;
  }

  public void setPrerequisites(List<String> prerequisites) {
    this.prerequisites = prerequisites;
  }

  public ProjectFeature projectId(Long projectId) {
    this.projectId = projectId;
    return this;
  }

   /**
   * The ID of the project.
   * @return projectId
  **/
  @Schema(description = "The ID of the project.")
  public Long getProjectId() {
    return projectId;
  }

  public void setProjectId(Long projectId) {
    this.projectId = projectId;
  }

  public ProjectFeature state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * The state of the feature. When updating the state of a feature, only ENABLED and DISABLED are supported. Responses can contain all values
   * @return state
  **/
  @Schema(description = "The state of the feature. When updating the state of a feature, only ENABLED and DISABLED are supported. Responses can contain all values")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public ProjectFeature toggleLocked(Boolean toggleLocked) {
    this.toggleLocked = toggleLocked;
    return this;
  }

   /**
   * Whether the state of the feature can be updated.
   * @return toggleLocked
  **/
  @Schema(description = "Whether the state of the feature can be updated.")
  public Boolean isToggleLocked() {
    return toggleLocked;
  }

  public void setToggleLocked(Boolean toggleLocked) {
    this.toggleLocked = toggleLocked;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectFeature projectFeature = (ProjectFeature) o;
    return Objects.equals(this.feature, projectFeature.feature) &&
        Objects.equals(this.imageUri, projectFeature.imageUri) &&
        Objects.equals(this.localisedDescription, projectFeature.localisedDescription) &&
        Objects.equals(this.localisedName, projectFeature.localisedName) &&
        Objects.equals(this.prerequisites, projectFeature.prerequisites) &&
        Objects.equals(this.projectId, projectFeature.projectId) &&
        Objects.equals(this.state, projectFeature.state) &&
        Objects.equals(this.toggleLocked, projectFeature.toggleLocked);
  }

  @Override
  public int hashCode() {
    return Objects.hash(feature, imageUri, localisedDescription, localisedName, prerequisites, projectId, state, toggleLocked);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectFeature {\n");
    
    sb.append("    feature: ").append(toIndentedString(feature)).append("\n");
    sb.append("    imageUri: ").append(toIndentedString(imageUri)).append("\n");
    sb.append("    localisedDescription: ").append(toIndentedString(localisedDescription)).append("\n");
    sb.append("    localisedName: ").append(toIndentedString(localisedName)).append("\n");
    sb.append("    prerequisites: ").append(toIndentedString(prerequisites)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    toggleLocked: ").append(toIndentedString(toggleLocked)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
