/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * OpenAPI spec version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.math.BigDecimal;
/**
 * A list of custom field details.
 */
@Schema(description = "A list of custom field details.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-07-21T14:14:33.600-07:00[America/Los_Angeles]")

public class ConnectCustomFieldValue {
  /**
   * The type of custom field.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    @SerializedName("StringIssueField")
    STRINGISSUEFIELD("StringIssueField"),
    @SerializedName("NumberIssueField")
    NUMBERISSUEFIELD("NumberIssueField"),
    @SerializedName("RichTextIssueField")
    RICHTEXTISSUEFIELD("RichTextIssueField"),
    @SerializedName("SingleSelectIssueField")
    SINGLESELECTISSUEFIELD("SingleSelectIssueField"),
    @SerializedName("MultiSelectIssueField")
    MULTISELECTISSUEFIELD("MultiSelectIssueField"),
    @SerializedName("TextIssueField")
    TEXTISSUEFIELD("TextIssueField");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String input) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("_type")
  private TypeEnum _type = null;

  @SerializedName("fieldID")
  private Integer fieldID = null;

  @SerializedName("issueID")
  private Integer issueID = null;

  @SerializedName("number")
  private BigDecimal number = null;

  @SerializedName("optionID")
  private String optionID = null;

  @SerializedName("richText")
  private String richText = null;

  @SerializedName("string")
  private String string = null;

  @SerializedName("text")
  private String text = null;

  public ConnectCustomFieldValue _type(TypeEnum _type) {
    this._type = _type;
    return this;
  }

   /**
   * The type of custom field.
   * @return _type
  **/
  @Schema(required = true, description = "The type of custom field.")
  public TypeEnum getType() {
    return _type;
  }

  public void setType(TypeEnum _type) {
    this._type = _type;
  }

  public ConnectCustomFieldValue fieldID(Integer fieldID) {
    this.fieldID = fieldID;
    return this;
  }

   /**
   * The custom field ID.
   * @return fieldID
  **/
  @Schema(required = true, description = "The custom field ID.")
  public Integer getFieldID() {
    return fieldID;
  }

  public void setFieldID(Integer fieldID) {
    this.fieldID = fieldID;
  }

  public ConnectCustomFieldValue issueID(Integer issueID) {
    this.issueID = issueID;
    return this;
  }

   /**
   * The issue ID.
   * @return issueID
  **/
  @Schema(required = true, description = "The issue ID.")
  public Integer getIssueID() {
    return issueID;
  }

  public void setIssueID(Integer issueID) {
    this.issueID = issueID;
  }

  public ConnectCustomFieldValue number(BigDecimal number) {
    this.number = number;
    return this;
  }

   /**
   * The value of number type custom field when &#x60;_type&#x60; is &#x60;NumberIssueField&#x60;.
   * @return number
  **/
  @Schema(description = "The value of number type custom field when `_type` is `NumberIssueField`.")
  public BigDecimal getNumber() {
    return number;
  }

  public void setNumber(BigDecimal number) {
    this.number = number;
  }

  public ConnectCustomFieldValue optionID(String optionID) {
    this.optionID = optionID;
    return this;
  }

   /**
   * The value of single select and multiselect custom field type when &#x60;_type&#x60; is &#x60;SingleSelectIssueField&#x60; or &#x60;MultiSelectIssueField&#x60;.
   * @return optionID
  **/
  @Schema(description = "The value of single select and multiselect custom field type when `_type` is `SingleSelectIssueField` or `MultiSelectIssueField`.")
  public String getOptionID() {
    return optionID;
  }

  public void setOptionID(String optionID) {
    this.optionID = optionID;
  }

  public ConnectCustomFieldValue richText(String richText) {
    this.richText = richText;
    return this;
  }

   /**
   * The value of richText type custom field when &#x60;_type&#x60; is &#x60;RichTextIssueField&#x60;.
   * @return richText
  **/
  @Schema(description = "The value of richText type custom field when `_type` is `RichTextIssueField`.")
  public String getRichText() {
    return richText;
  }

  public void setRichText(String richText) {
    this.richText = richText;
  }

  public ConnectCustomFieldValue string(String string) {
    this.string = string;
    return this;
  }

   /**
   * The value of string type custom field when &#x60;_type&#x60; is &#x60;StringIssueField&#x60;.
   * @return string
  **/
  @Schema(description = "The value of string type custom field when `_type` is `StringIssueField`.")
  public String getString() {
    return string;
  }

  public void setString(String string) {
    this.string = string;
  }

  public ConnectCustomFieldValue text(String text) {
    this.text = text;
    return this;
  }

   /**
   * The value of of text custom field type when &#x60;_type&#x60; is &#x60;TextIssueField&#x60;.
   * @return text
  **/
  @Schema(description = "The value of of text custom field type when `_type` is `TextIssueField`.")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectCustomFieldValue connectCustomFieldValue = (ConnectCustomFieldValue) o;
    return Objects.equals(this._type, connectCustomFieldValue._type) &&
        Objects.equals(this.fieldID, connectCustomFieldValue.fieldID) &&
        Objects.equals(this.issueID, connectCustomFieldValue.issueID) &&
        Objects.equals(this.number, connectCustomFieldValue.number) &&
        Objects.equals(this.optionID, connectCustomFieldValue.optionID) &&
        Objects.equals(this.richText, connectCustomFieldValue.richText) &&
        Objects.equals(this.string, connectCustomFieldValue.string) &&
        Objects.equals(this.text, connectCustomFieldValue.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_type, fieldID, issueID, number, optionID, richText, string, text);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectCustomFieldValue {\n");
    
    sb.append("    _type: ").append(toIndentedString(_type)).append("\n");
    sb.append("    fieldID: ").append(toIndentedString(fieldID)).append("\n");
    sb.append("    issueID: ").append(toIndentedString(issueID)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    optionID: ").append(toIndentedString(optionID)).append("\n");
    sb.append("    richText: ").append(toIndentedString(richText)).append("\n");
    sb.append("    string: ").append(toIndentedString(string)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
