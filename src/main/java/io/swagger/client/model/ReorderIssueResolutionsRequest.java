/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * OpenAPI spec version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Change the order of issue resolutions.
 */
@Schema(description = "Change the order of issue resolutions.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-07-21T14:14:33.600-07:00[America/Los_Angeles]")

public class ReorderIssueResolutionsRequest {
  @SerializedName("after")
  private String after = null;

  @SerializedName("ids")
  private List<String> ids = new ArrayList<String>();

  @SerializedName("position")
  private String position = null;

  public ReorderIssueResolutionsRequest after(String after) {
    this.after = after;
    return this;
  }

   /**
   * The ID of the resolution. Required if &#x60;position&#x60; isn&#x27;t provided.
   * @return after
  **/
  @Schema(description = "The ID of the resolution. Required if `position` isn't provided.")
  public String getAfter() {
    return after;
  }

  public void setAfter(String after) {
    this.after = after;
  }

  public ReorderIssueResolutionsRequest ids(List<String> ids) {
    this.ids = ids;
    return this;
  }

  public ReorderIssueResolutionsRequest addIdsItem(String idsItem) {
    this.ids.add(idsItem);
    return this;
  }

   /**
   * The list of resolution IDs to be reordered. Cannot contain duplicates nor after ID.
   * @return ids
  **/
  @Schema(required = true, description = "The list of resolution IDs to be reordered. Cannot contain duplicates nor after ID.")
  public List<String> getIds() {
    return ids;
  }

  public void setIds(List<String> ids) {
    this.ids = ids;
  }

  public ReorderIssueResolutionsRequest position(String position) {
    this.position = position;
    return this;
  }

   /**
   * The position for issue resolutions to be moved to. Required if &#x60;after&#x60; isn&#x27;t provided.
   * @return position
  **/
  @Schema(description = "The position for issue resolutions to be moved to. Required if `after` isn't provided.")
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReorderIssueResolutionsRequest reorderIssueResolutionsRequest = (ReorderIssueResolutionsRequest) o;
    return Objects.equals(this.after, reorderIssueResolutionsRequest.after) &&
        Objects.equals(this.ids, reorderIssueResolutionsRequest.ids) &&
        Objects.equals(this.position, reorderIssueResolutionsRequest.position);
  }

  @Override
  public int hashCode() {
    return Objects.hash(after, ids, position);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReorderIssueResolutionsRequest {\n");
    
    sb.append("    after: ").append(toIndentedString(after)).append("\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
