/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * OpenAPI spec version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.JqlQueryFieldEntityProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * A field used in a JQL query. See [Advanced searching - fields reference](https://confluence.atlassian.com/x/dAiiLQ) for more information about fields in JQL queries.
 */
@Schema(description = "A field used in a JQL query. See [Advanced searching - fields reference](https://confluence.atlassian.com/x/dAiiLQ) for more information about fields in JQL queries.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-07-21T14:14:33.600-07:00[America/Los_Angeles]")

public class JqlQueryField {
  @SerializedName("encodedName")
  private String encodedName = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("property")
  private List<JqlQueryFieldEntityProperty> property = null;

  public JqlQueryField encodedName(String encodedName) {
    this.encodedName = encodedName;
    return this;
  }

   /**
   * The encoded name of the field, which can be used directly in a JQL query.
   * @return encodedName
  **/
  @Schema(description = "The encoded name of the field, which can be used directly in a JQL query.")
  public String getEncodedName() {
    return encodedName;
  }

  public void setEncodedName(String encodedName) {
    this.encodedName = encodedName;
  }

  public JqlQueryField name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the field.
   * @return name
  **/
  @Schema(required = true, description = "The name of the field.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public JqlQueryField property(List<JqlQueryFieldEntityProperty> property) {
    this.property = property;
    return this;
  }

  public JqlQueryField addPropertyItem(JqlQueryFieldEntityProperty propertyItem) {
    if (this.property == null) {
      this.property = new ArrayList<JqlQueryFieldEntityProperty>();
    }
    this.property.add(propertyItem);
    return this;
  }

   /**
   * When the field refers to a value in an entity property, details of the entity property value.
   * @return property
  **/
  @Schema(description = "When the field refers to a value in an entity property, details of the entity property value.")
  public List<JqlQueryFieldEntityProperty> getProperty() {
    return property;
  }

  public void setProperty(List<JqlQueryFieldEntityProperty> property) {
    this.property = property;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JqlQueryField jqlQueryField = (JqlQueryField) o;
    return Objects.equals(this.encodedName, jqlQueryField.encodedName) &&
        Objects.equals(this.name, jqlQueryField.name) &&
        Objects.equals(this.property, jqlQueryField.property);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encodedName, name, property);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JqlQueryField {\n");
    
    sb.append("    encodedName: ").append(toIndentedString(encodedName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    property: ").append(toIndentedString(property)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
