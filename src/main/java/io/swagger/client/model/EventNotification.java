/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * OpenAPI spec version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Details about a notification associated with an event.
 */
@Schema(description = "Details about a notification associated with an event.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-07-21T14:14:33.600-07:00[America/Los_Angeles]")

public class EventNotification {
  @SerializedName("emailAddress")
  private String emailAddress = null;

  @SerializedName("expand")
  private String expand = null;

  @SerializedName("field")
  private AllOfEventNotificationField field = null;

  @SerializedName("group")
  private AllOfEventNotificationGroup group = null;

  @SerializedName("id")
  private Long id = null;

  /**
   * Identifies the recipients of the notification.
   */
  @JsonAdapter(NotificationTypeEnum.Adapter.class)
  public enum NotificationTypeEnum {
    @SerializedName("CurrentAssignee")
    CURRENTASSIGNEE("CurrentAssignee"),
    @SerializedName("Reporter")
    REPORTER("Reporter"),
    @SerializedName("CurrentUser")
    CURRENTUSER("CurrentUser"),
    @SerializedName("ProjectLead")
    PROJECTLEAD("ProjectLead"),
    @SerializedName("ComponentLead")
    COMPONENTLEAD("ComponentLead"),
    @SerializedName("User")
    USER("User"),
    @SerializedName("Group")
    GROUP("Group"),
    @SerializedName("ProjectRole")
    PROJECTROLE("ProjectRole"),
    @SerializedName("EmailAddress")
    EMAILADDRESS("EmailAddress"),
    @SerializedName("AllWatchers")
    ALLWATCHERS("AllWatchers"),
    @SerializedName("UserCustomField")
    USERCUSTOMFIELD("UserCustomField"),
    @SerializedName("GroupCustomField")
    GROUPCUSTOMFIELD("GroupCustomField");

    private String value;

    NotificationTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static NotificationTypeEnum fromValue(String input) {
      for (NotificationTypeEnum b : NotificationTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<NotificationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NotificationTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public NotificationTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return NotificationTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("notificationType")
  private NotificationTypeEnum notificationType = null;

  @SerializedName("parameter")
  private String parameter = null;

  @SerializedName("projectRole")
  private AllOfEventNotificationProjectRole projectRole = null;

  @SerializedName("recipient")
  private String recipient = null;

  @SerializedName("user")
  private AllOfEventNotificationUser user = null;

  public EventNotification emailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

   /**
   * The email address.
   * @return emailAddress
  **/
  @Schema(description = "The email address.")
  public String getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }

  public EventNotification expand(String expand) {
    this.expand = expand;
    return this;
  }

   /**
   * Expand options that include additional event notification details in the response.
   * @return expand
  **/
  @Schema(description = "Expand options that include additional event notification details in the response.")
  public String getExpand() {
    return expand;
  }

  public void setExpand(String expand) {
    this.expand = expand;
  }

  public EventNotification field(AllOfEventNotificationField field) {
    this.field = field;
    return this;
  }

   /**
   * The custom user or group field.
   * @return field
  **/
  @Schema(description = "The custom user or group field.")
  public AllOfEventNotificationField getField() {
    return field;
  }

  public void setField(AllOfEventNotificationField field) {
    this.field = field;
  }

  public EventNotification group(AllOfEventNotificationGroup group) {
    this.group = group;
    return this;
  }

   /**
   * The specified group.
   * @return group
  **/
  @Schema(description = "The specified group.")
  public AllOfEventNotificationGroup getGroup() {
    return group;
  }

  public void setGroup(AllOfEventNotificationGroup group) {
    this.group = group;
  }

  public EventNotification id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * The ID of the notification.
   * @return id
  **/
  @Schema(description = "The ID of the notification.")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public EventNotification notificationType(NotificationTypeEnum notificationType) {
    this.notificationType = notificationType;
    return this;
  }

   /**
   * Identifies the recipients of the notification.
   * @return notificationType
  **/
  @Schema(description = "Identifies the recipients of the notification.")
  public NotificationTypeEnum getNotificationType() {
    return notificationType;
  }

  public void setNotificationType(NotificationTypeEnum notificationType) {
    this.notificationType = notificationType;
  }

  public EventNotification parameter(String parameter) {
    this.parameter = parameter;
    return this;
  }

   /**
   * As a group&#x27;s name can change, use of &#x60;recipient&#x60; is recommended. The identifier associated with the &#x60;notificationType&#x60; value that defines the receiver of the notification, where the receiver isn&#x27;t implied by &#x60;notificationType&#x60; value. So, when &#x60;notificationType&#x60; is:   *  &#x60;User&#x60; The &#x60;parameter&#x60; is the user account ID.  *  &#x60;Group&#x60; The &#x60;parameter&#x60; is the group name.  *  &#x60;ProjectRole&#x60; The &#x60;parameter&#x60; is the project role ID.  *  &#x60;UserCustomField&#x60; The &#x60;parameter&#x60; is the ID of the custom field.  *  &#x60;GroupCustomField&#x60; The &#x60;parameter&#x60; is the ID of the custom field.
   * @return parameter
  **/
  @Schema(description = "As a group's name can change, use of `recipient` is recommended. The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by `notificationType` value. So, when `notificationType` is:   *  `User` The `parameter` is the user account ID.  *  `Group` The `parameter` is the group name.  *  `ProjectRole` The `parameter` is the project role ID.  *  `UserCustomField` The `parameter` is the ID of the custom field.  *  `GroupCustomField` The `parameter` is the ID of the custom field.")
  public String getParameter() {
    return parameter;
  }

  public void setParameter(String parameter) {
    this.parameter = parameter;
  }

  public EventNotification projectRole(AllOfEventNotificationProjectRole projectRole) {
    this.projectRole = projectRole;
    return this;
  }

   /**
   * The specified project role.
   * @return projectRole
  **/
  @Schema(description = "The specified project role.")
  public AllOfEventNotificationProjectRole getProjectRole() {
    return projectRole;
  }

  public void setProjectRole(AllOfEventNotificationProjectRole projectRole) {
    this.projectRole = projectRole;
  }

  public EventNotification recipient(String recipient) {
    this.recipient = recipient;
    return this;
  }

   /**
   * The identifier associated with the &#x60;notificationType&#x60; value that defines the receiver of the notification, where the receiver isn&#x27;t implied by the &#x60;notificationType&#x60; value. So, when &#x60;notificationType&#x60; is:   *  &#x60;User&#x60;, &#x60;recipient&#x60; is the user account ID.  *  &#x60;Group&#x60;, &#x60;recipient&#x60; is the group ID.  *  &#x60;ProjectRole&#x60;, &#x60;recipient&#x60; is the project role ID.  *  &#x60;UserCustomField&#x60;, &#x60;recipient&#x60; is the ID of the custom field.  *  &#x60;GroupCustomField&#x60;, &#x60;recipient&#x60; is the ID of the custom field.
   * @return recipient
  **/
  @Schema(description = "The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by the `notificationType` value. So, when `notificationType` is:   *  `User`, `recipient` is the user account ID.  *  `Group`, `recipient` is the group ID.  *  `ProjectRole`, `recipient` is the project role ID.  *  `UserCustomField`, `recipient` is the ID of the custom field.  *  `GroupCustomField`, `recipient` is the ID of the custom field.")
  public String getRecipient() {
    return recipient;
  }

  public void setRecipient(String recipient) {
    this.recipient = recipient;
  }

  public EventNotification user(AllOfEventNotificationUser user) {
    this.user = user;
    return this;
  }

   /**
   * The specified user.
   * @return user
  **/
  @Schema(description = "The specified user.")
  public AllOfEventNotificationUser getUser() {
    return user;
  }

  public void setUser(AllOfEventNotificationUser user) {
    this.user = user;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventNotification eventNotification = (EventNotification) o;
    return Objects.equals(this.emailAddress, eventNotification.emailAddress) &&
        Objects.equals(this.expand, eventNotification.expand) &&
        Objects.equals(this.field, eventNotification.field) &&
        Objects.equals(this.group, eventNotification.group) &&
        Objects.equals(this.id, eventNotification.id) &&
        Objects.equals(this.notificationType, eventNotification.notificationType) &&
        Objects.equals(this.parameter, eventNotification.parameter) &&
        Objects.equals(this.projectRole, eventNotification.projectRole) &&
        Objects.equals(this.recipient, eventNotification.recipient) &&
        Objects.equals(this.user, eventNotification.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emailAddress, expand, field, group, id, notificationType, parameter, projectRole, recipient, user);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventNotification {\n");
    
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    expand: ").append(toIndentedString(expand)).append("\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    notificationType: ").append(toIndentedString(notificationType)).append("\n");
    sb.append("    parameter: ").append(toIndentedString(parameter)).append("\n");
    sb.append("    projectRole: ").append(toIndentedString(projectRole)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
