/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * OpenAPI spec version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.ConditionGroupConfiguration;
import io.swagger.client.model.WorkflowRuleConfiguration;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * The conditions group associated with the transition.
 */
@Schema(description = "The conditions group associated with the transition.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-07-21T14:14:33.600-07:00[America/Los_Angeles]")

public class ConditionGroupConfiguration {
  @SerializedName("conditionGroups")
  private List<ConditionGroupConfiguration> conditionGroups = null;

  @SerializedName("conditions")
  private List<WorkflowRuleConfiguration> conditions = null;

  /**
   * Determines how the conditions in the group are evaluated. Accepts either &#x60;ANY&#x60; or &#x60;ALL&#x60;. If &#x60;ANY&#x60; is used, at least one condition in the group must be true for the group to evaluate to true. If &#x60;ALL&#x60; is used, all conditions in the group must be true for the group to evaluate to true.
   */
  @JsonAdapter(OperationEnum.Adapter.class)
  public enum OperationEnum {
    @SerializedName("ANY")
    ANY("ANY"),
    @SerializedName("ALL")
    ALL("ALL");

    private String value;

    OperationEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static OperationEnum fromValue(String input) {
      for (OperationEnum b : OperationEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<OperationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public OperationEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return OperationEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("operation")
  private OperationEnum operation = null;

  public ConditionGroupConfiguration conditionGroups(List<ConditionGroupConfiguration> conditionGroups) {
    this.conditionGroups = conditionGroups;
    return this;
  }

  public ConditionGroupConfiguration addConditionGroupsItem(ConditionGroupConfiguration conditionGroupsItem) {
    if (this.conditionGroups == null) {
      this.conditionGroups = new ArrayList<ConditionGroupConfiguration>();
    }
    this.conditionGroups.add(conditionGroupsItem);
    return this;
  }

   /**
   * The nested conditions of the condition group.
   * @return conditionGroups
  **/
  @Schema(description = "The nested conditions of the condition group.")
  public List<ConditionGroupConfiguration> getConditionGroups() {
    return conditionGroups;
  }

  public void setConditionGroups(List<ConditionGroupConfiguration> conditionGroups) {
    this.conditionGroups = conditionGroups;
  }

  public ConditionGroupConfiguration conditions(List<WorkflowRuleConfiguration> conditions) {
    this.conditions = conditions;
    return this;
  }

  public ConditionGroupConfiguration addConditionsItem(WorkflowRuleConfiguration conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<WorkflowRuleConfiguration>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

   /**
   * The rules for this condition.
   * @return conditions
  **/
  @Schema(description = "The rules for this condition.")
  public List<WorkflowRuleConfiguration> getConditions() {
    return conditions;
  }

  public void setConditions(List<WorkflowRuleConfiguration> conditions) {
    this.conditions = conditions;
  }

  public ConditionGroupConfiguration operation(OperationEnum operation) {
    this.operation = operation;
    return this;
  }

   /**
   * Determines how the conditions in the group are evaluated. Accepts either &#x60;ANY&#x60; or &#x60;ALL&#x60;. If &#x60;ANY&#x60; is used, at least one condition in the group must be true for the group to evaluate to true. If &#x60;ALL&#x60; is used, all conditions in the group must be true for the group to evaluate to true.
   * @return operation
  **/
  @Schema(description = "Determines how the conditions in the group are evaluated. Accepts either `ANY` or `ALL`. If `ANY` is used, at least one condition in the group must be true for the group to evaluate to true. If `ALL` is used, all conditions in the group must be true for the group to evaluate to true.")
  public OperationEnum getOperation() {
    return operation;
  }

  public void setOperation(OperationEnum operation) {
    this.operation = operation;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConditionGroupConfiguration conditionGroupConfiguration = (ConditionGroupConfiguration) o;
    return Objects.equals(this.conditionGroups, conditionGroupConfiguration.conditionGroups) &&
        Objects.equals(this.conditions, conditionGroupConfiguration.conditions) &&
        Objects.equals(this.operation, conditionGroupConfiguration.operation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conditionGroups, conditions, operation);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConditionGroupConfiguration {\n");
    
    sb.append("    conditionGroups: ").append(toIndentedString(conditionGroups)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
