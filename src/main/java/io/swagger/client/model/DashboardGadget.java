/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * OpenAPI spec version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * Details of a gadget.
 */
@Schema(description = "Details of a gadget.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-07-21T14:14:33.600-07:00[America/Los_Angeles]")

public class DashboardGadget {
  /**
   * The color of the gadget. Should be one of &#x60;blue&#x60;, &#x60;red&#x60;, &#x60;yellow&#x60;, &#x60;green&#x60;, &#x60;cyan&#x60;, &#x60;purple&#x60;, &#x60;gray&#x60;, or &#x60;white&#x60;.
   */
  @JsonAdapter(ColorEnum.Adapter.class)
  public enum ColorEnum {
    @SerializedName("blue")
    BLUE("blue"),
    @SerializedName("red")
    RED("red"),
    @SerializedName("yellow")
    YELLOW("yellow"),
    @SerializedName("green")
    GREEN("green"),
    @SerializedName("cyan")
    CYAN("cyan"),
    @SerializedName("purple")
    PURPLE("purple"),
    @SerializedName("gray")
    GRAY("gray"),
    @SerializedName("white")
    WHITE("white");

    private String value;

    ColorEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ColorEnum fromValue(String input) {
      for (ColorEnum b : ColorEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ColorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ColorEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ColorEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ColorEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("color")
  private ColorEnum color = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("moduleKey")
  private String moduleKey = null;

  @SerializedName("position")
  private AllOfDashboardGadgetPosition position = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("uri")
  private String uri = null;

   /**
   * The color of the gadget. Should be one of &#x60;blue&#x60;, &#x60;red&#x60;, &#x60;yellow&#x60;, &#x60;green&#x60;, &#x60;cyan&#x60;, &#x60;purple&#x60;, &#x60;gray&#x60;, or &#x60;white&#x60;.
   * @return color
  **/
  @Schema(required = true, description = "The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.")
  public ColorEnum getColor() {
    return color;
  }

   /**
   * The ID of the gadget instance.
   * @return id
  **/
  @Schema(required = true, description = "The ID of the gadget instance.")
  public Long getId() {
    return id;
  }

   /**
   * The module key of the gadget type.
   * @return moduleKey
  **/
  @Schema(description = "The module key of the gadget type.")
  public String getModuleKey() {
    return moduleKey;
  }

   /**
   * The position of the gadget.
   * @return position
  **/
  @Schema(required = true, description = "The position of the gadget.")
  public AllOfDashboardGadgetPosition getPosition() {
    return position;
  }

   /**
   * The title of the gadget.
   * @return title
  **/
  @Schema(required = true, description = "The title of the gadget.")
  public String getTitle() {
    return title;
  }

   /**
   * The URI of the gadget type.
   * @return uri
  **/
  @Schema(description = "The URI of the gadget type.")
  public String getUri() {
    return uri;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DashboardGadget dashboardGadget = (DashboardGadget) o;
    return Objects.equals(this.color, dashboardGadget.color) &&
        Objects.equals(this.id, dashboardGadget.id) &&
        Objects.equals(this.moduleKey, dashboardGadget.moduleKey) &&
        Objects.equals(this.position, dashboardGadget.position) &&
        Objects.equals(this.title, dashboardGadget.title) &&
        Objects.equals(this.uri, dashboardGadget.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(color, id, moduleKey, position, title, uri);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DashboardGadget {\n");
    
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    moduleKey: ").append(toIndentedString(moduleKey)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
