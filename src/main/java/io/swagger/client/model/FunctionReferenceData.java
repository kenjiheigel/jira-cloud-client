/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * OpenAPI spec version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * Details of functions that can be used in advanced searches.
 */
@Schema(description = "Details of functions that can be used in advanced searches.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-07-21T14:14:33.600-07:00[America/Los_Angeles]")

public class FunctionReferenceData {
  @SerializedName("displayName")
  private String displayName = null;

  /**
   * Whether the function can take a list of arguments.
   */
  @JsonAdapter(IsListEnum.Adapter.class)
  public enum IsListEnum {
    @SerializedName("true")
    TRUE("true"),
    @SerializedName("false")
    FALSE("false");

    private String value;

    IsListEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static IsListEnum fromValue(String input) {
      for (IsListEnum b : IsListEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<IsListEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IsListEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public IsListEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return IsListEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("isList")
  private IsListEnum isList = null;

  @SerializedName("types")
  private List<String> types = null;

  @SerializedName("value")
  private String value = null;

  public FunctionReferenceData displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * The display name of the function.
   * @return displayName
  **/
  @Schema(description = "The display name of the function.")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public FunctionReferenceData isList(IsListEnum isList) {
    this.isList = isList;
    return this;
  }

   /**
   * Whether the function can take a list of arguments.
   * @return isList
  **/
  @Schema(description = "Whether the function can take a list of arguments.")
  public IsListEnum getIsList() {
    return isList;
  }

  public void setIsList(IsListEnum isList) {
    this.isList = isList;
  }

  public FunctionReferenceData types(List<String> types) {
    this.types = types;
    return this;
  }

  public FunctionReferenceData addTypesItem(String typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<String>();
    }
    this.types.add(typesItem);
    return this;
  }

   /**
   * The data types returned by the function.
   * @return types
  **/
  @Schema(description = "The data types returned by the function.")
  public List<String> getTypes() {
    return types;
  }

  public void setTypes(List<String> types) {
    this.types = types;
  }

  public FunctionReferenceData value(String value) {
    this.value = value;
    return this;
  }

   /**
   * The function identifier.
   * @return value
  **/
  @Schema(description = "The function identifier.")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FunctionReferenceData functionReferenceData = (FunctionReferenceData) o;
    return Objects.equals(this.displayName, functionReferenceData.displayName) &&
        Objects.equals(this.isList, functionReferenceData.isList) &&
        Objects.equals(this.types, functionReferenceData.types) &&
        Objects.equals(this.value, functionReferenceData.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, isList, types, value);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FunctionReferenceData {\n");
    
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    isList: ").append(toIndentedString(isList)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
